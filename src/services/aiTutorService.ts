import { authService } from './authService';
import { databaseService } from './databaseService.platform';
import { configService } from './configService';
import { Flashcard } from '../types';
import AsyncStorage from '@react-native-async-storage/async-storage';

interface TutorPersonality {
  name: string;
  style: 'encouraging' | 'direct' | 'humorous' | 'academic' | 'friendly';
  expertise: string[];
  greeting: string;
  encouragementPhrases: string[];
  explanationStyle: string;
}

interface LearningPath {
  id: string;
  title: string;
  description: string;
  topics: Array<{
    id: string;
    title: string;
    difficulty: string;
    prerequisites: string[];
    estimatedHours: number;
    completed: boolean;
  }>;
  progress: number;
  estimatedDuration: string;
}

interface PersonalizedExplanation {
  explanation: string;
  examples: string[];
  commonMistakes: string[];
  practiceQuestions: string[];
  relatedTopics: string[];
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  adaptedToUser: boolean;
}

interface StudyRecommendation {
  type: 'focus_area' | 'review' | 'new_topic' | 'practice_mode';
  title: string;
  description: string;
  reasoning: string;
  estimatedTime: number;
  priority: 'high' | 'medium' | 'low';
  flashcardsCount?: number;
  category?: string;
}

class AITutorService {
  private currentTutor: TutorPersonality | null = null;
  private apiKey: string | null = null;
  private conversationHistory: Array<{
    role: 'user' | 'tutor';
    content: string;
    timestamp: Date;
  }> = [];

  private tutorPersonalities: TutorPersonality[] = [
    {
      name: 'Alex',
      style: 'encouraging',
      expertise: ['JavaScript', 'React', 'Node.js'],
      greeting: '¬°Hola! Soy Alex, tu tutor de programaci√≥n. Estoy aqu√≠ para ayudarte a dominar el desarrollo web paso a paso. üöÄ',
      encouragementPhrases: [
        '¬°Excelente progreso!',
        'Vas por buen camino',
        'Este concepto puede ser complejo, pero lo est√°s manejando bien',
        '¬°Sigue as√≠! Cada error es una oportunidad de aprender',
      ],
      explanationStyle: 'Explicaciones paso a paso con analog√≠as del mundo real y ejemplos pr√°cticos'
    },
    {
      name: 'Dr. Sarah',
      style: 'academic',
      expertise: ['System Design', 'Algorithms', 'Computer Science'],
      greeting: 'Buenos d√≠as. Soy la Dr. Sarah, especializada en ciencias de la computaci√≥n. Exploraremos conceptos fundamentales con rigor acad√©mico.',
      encouragementPhrases: [
        'An√°lisis preciso',
        'Comprensi√≥n conceptual s√≥lida',
        'Reflexi√≥n cr√≠tica interesante',
        'Enfoque metodol√≥gico correcto',
      ],
      explanationStyle: 'Explicaciones te√≥ricas fundamentadas con referencias y an√°lisis profundo'
    },
    {
      name: 'Miguel',
      style: 'friendly',
      expertise: ['React Native', 'Mobile Development', 'TypeScript'],
      greeting: '¬°Hey! Soy Miguel, desarrollador m√≥vil. Te voy a ense√±ar React Native como si fu√©ramos compa√±eros de equipo. üì±',
      encouragementPhrases: [
        '¬°Esa es la actitud!',
        'Como dir√≠a mi abuela: "Poco a poco se llega lejos"',
        'Perfect! As√≠ se hace en el mundo real',
        'Esa pregunta me la hice yo tambi√©n cuando empec√©',
      ],
      explanationStyle: 'Explicaciones conversacionales con experiencias reales y tips pr√°cticos'
    }
  ];

  async initialize(openAIKey?: string): Promise<void> {
    try {
      // Get API key from config service
      this.apiKey = await configService.getOpenAIApiKey();

      // Load user's preferred tutor
      await this.loadUserTutorPreference();
      
      // Load conversation history
      await this.loadConversationHistory();

      console.log('ü§ñ AI Tutor Service initialized with API key:', this.apiKey ? 'Yes' : 'No');
    } catch (error) {
      console.error('‚ùå Failed to initialize AI Tutor:', error);
    }
  }

  // ==================== TUTOR PERSONALITY MANAGEMENT ====================

  private async loadUserTutorPreference(): Promise<void> {
    try {
      const saved = await AsyncStorage.getItem('@preferred_tutor');
      if (saved) {
        const tutorName = JSON.parse(saved);
        this.currentTutor = this.tutorPersonalities.find(t => t.name === tutorName) || this.tutorPersonalities[0];
      } else {
        // Default to encouraging tutor for new users
        this.currentTutor = this.tutorPersonalities[0];
      }
    } catch (error) {
      this.currentTutor = this.tutorPersonalities[0];
    }
  }

  async changeTutor(tutorName: string): Promise<void> {
    const tutor = this.tutorPersonalities.find(t => t.name === tutorName);
    if (tutor) {
      this.currentTutor = tutor;
      await AsyncStorage.setItem('@preferred_tutor', JSON.stringify(tutorName));
      
      // Reset conversation with new tutor
      this.conversationHistory = [];
      await this.saveConversationHistory();
    }
  }

  getTutorPersonalities(): TutorPersonality[] {
    return [...this.tutorPersonalities];
  }

  getCurrentTutor(): TutorPersonality | null {
    return this.currentTutor;
  }

  // ==================== PERSONALIZED EXPLANATIONS ====================

  async generatePersonalizedExplanation(
    question: string, 
    userAnswer: string, 
    correctAnswer: string
  ): Promise<PersonalizedExplanation> {
    try {
      const userProfile = authService.getCurrentProfile();
      const analytics = await databaseService.getStudyAnalytics(30);
      
      // Create context about the user
      const userContext = this.buildUserContext(userProfile, analytics);
      
      if (this.apiKey) {
        // Use OpenAI for personalized explanation
        return await this.generateAIExplanation(question, userAnswer, correctAnswer, userContext);
      } else {
        // Fallback to template-based explanation
        return this.generateTemplateExplanation(question, userAnswer, correctAnswer);
      }
    } catch (error) {
      console.error('Failed to generate explanation:', error);
      return this.generateTemplateExplanation(question, userAnswer, correctAnswer);
    }
  }

  private buildUserContext(userProfile: any, analytics: any): string {
    const level = userProfile?.level || 1;
    const accuracy = analytics.accuracy || 0;
    const weakAreas = analytics.categoryBreakdown
      .filter((cat: any) => cat.accuracy < 60)
      .map((cat: any) => cat.category);

    return `Usuario nivel ${level}, precisi√≥n promedio ${accuracy.toFixed(1)}%, areas d√©biles: ${weakAreas.join(', ')}`;
  }

  private async generateAIExplanation(
    question: string,
    userAnswer: string,
    correctAnswer: string,
    userContext: string
  ): Promise<PersonalizedExplanation> {
    const prompt = this.buildExplanationPrompt(question, userAnswer, correctAnswer, userContext);
    
    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            {
              role: 'system',
              content: `Eres ${this.currentTutor?.name}, un tutor de programaci√≥n con estilo ${this.currentTutor?.style}. ${this.currentTutor?.explanationStyle}. Responde en espa√±ol.`
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 800,
          temperature: 0.7,
        }),
      });

      const data = await response.json();
      const aiResponse = data.choices?.[0]?.message?.content || '';

      return this.parseAIExplanation(aiResponse);
    } catch (error) {
      console.error('OpenAI API error:', error);
      return this.generateTemplateExplanation(question, userAnswer, correctAnswer);
    }
  }

  private buildExplanationPrompt(
    question: string,
    userAnswer: string,
    correctAnswer: string,
    userContext: string
  ): string {
    return `
    Contexto del usuario: ${userContext}
    
    Pregunta: ${question}
    Respuesta del usuario: ${userAnswer}
    Respuesta correcta: ${correctAnswer}
    
    Por favor proporciona:
    1. Una explicaci√≥n personalizada (adaptada al nivel del usuario)
    2. 2-3 ejemplos pr√°cticos
    3. Errores comunes relacionados
    4. 2 preguntas de pr√°ctica similares
    5. Temas relacionados para explorar
    
    Formato tu respuesta como JSON:
    {
      "explanation": "explicaci√≥n detallada",
      "examples": ["ejemplo1", "ejemplo2"],
      "commonMistakes": ["error1", "error2"],
      "practiceQuestions": ["pregunta1", "pregunta2"],
      "relatedTopics": ["tema1", "tema2"],
      "difficulty": "beginner|intermediate|advanced"
    }
    `;
  }

  private parseAIExplanation(aiResponse: string): PersonalizedExplanation {
    try {
      const parsed = JSON.parse(aiResponse);
      return {
        explanation: parsed.explanation || 'Explicaci√≥n no disponible',
        examples: parsed.examples || [],
        commonMistakes: parsed.commonMistakes || [],
        practiceQuestions: parsed.practiceQuestions || [],
        relatedTopics: parsed.relatedTopics || [],
        difficulty: parsed.difficulty || 'intermediate',
        adaptedToUser: true,
      };
    } catch (error) {
      // If JSON parsing fails, try to extract explanation from text
      return {
        explanation: aiResponse || 'Error al generar explicaci√≥n',
        examples: [],
        commonMistakes: [],
        practiceQuestions: [],
        relatedTopics: [],
        difficulty: 'intermediate',
        adaptedToUser: true,
      };
    }
  }

  private generateTemplateExplanation(
    question: string,
    userAnswer: string,
    correctAnswer: string
  ): PersonalizedExplanation {
    return {
      explanation: `La respuesta correcta es: ${correctAnswer}. Tu respuesta "${userAnswer}" ${userAnswer.toLowerCase().includes(correctAnswer.toLowerCase()) ? 'est√° en la direcci√≥n correcta, pero' : 'no es exacta porque'} necesita m√°s precisi√≥n en los detalles t√©cnicos.`,
      examples: [
        'Ejemplo b√°sico de implementaci√≥n',
        'Caso de uso com√∫n en proyectos reales'
      ],
      commonMistakes: [
        'Confundir conceptos similares',
        'No considerar casos edge'
      ],
      practiceQuestions: [
        '¬øPuedes dar otro ejemplo de este concepto?',
        '¬øEn qu√© situaciones usar√≠as esto?'
      ],
      relatedTopics: [
        'Conceptos fundamentales',
        'Buenas pr√°cticas'
      ],
      difficulty: 'intermediate',
      adaptedToUser: false,
    };
  }

  // ==================== STUDY PATH GENERATION ====================

  async generateStudyPath(
    targetRole: string = 'Full Stack Developer',
    currentLevel: 'beginner' | 'intermediate' | 'advanced' = 'intermediate',
    timeCommitment: number = 30 // minutes per day
  ): Promise<LearningPath> {
    try {
      const userProfile = authService.getCurrentProfile();
      const analytics = await databaseService.getStudyAnalytics(60);
      
      if (this.apiKey) {
        return await this.generateAIStudyPath(targetRole, currentLevel, timeCommitment, analytics);
      } else {
        return this.generateTemplateStudyPath(targetRole, currentLevel);
      }
    } catch (error) {
      console.error('Failed to generate study path:', error);
      return this.generateTemplateStudyPath(targetRole, currentLevel);
    }
  }

  private async generateAIStudyPath(
    targetRole: string,
    currentLevel: string,
    timeCommitment: number,
    analytics: any
  ): Promise<LearningPath> {
    const prompt = `
    Crea un plan de estudio personalizado para convertirse en ${targetRole}.
    Nivel actual: ${currentLevel}
    Tiempo disponible: ${timeCommitment} minutos diarios
    √Åreas actuales de conocimiento: ${analytics.categoryBreakdown.map((c: any) => `${c.category} (${c.accuracy}%)`).join(', ')}
    
    Responde con un JSON con estructura de learning path con temas ordenados por prioridad y dependencias.
    `;

    try {
      const response = await this.makeOpenAIRequest(prompt, 1200);
      return this.parseStudyPath(response);
    } catch (error) {
      return this.generateTemplateStudyPath(targetRole, currentLevel);
    }
  }

  private generateTemplateStudyPath(targetRole: string, currentLevel: string): LearningPath {
    const topics = [
      {
        id: 'js-fundamentals',
        title: 'JavaScript Fundamentals',
        difficulty: 'beginner',
        prerequisites: [],
        estimatedHours: 20,
        completed: false,
      },
      {
        id: 'react-basics',
        title: 'React Fundamentals',
        difficulty: 'intermediate',
        prerequisites: ['js-fundamentals'],
        estimatedHours: 25,
        completed: false,
      },
      {
        id: 'typescript',
        title: 'TypeScript',
        difficulty: 'intermediate',
        prerequisites: ['js-fundamentals'],
        estimatedHours: 15,
        completed: false,
      },
      {
        id: 'node-backend',
        title: 'Node.js & APIs',
        difficulty: 'intermediate',
        prerequisites: ['js-fundamentals'],
        estimatedHours: 30,
        completed: false,
      },
      {
        id: 'databases',
        title: 'Databases & SQL',
        difficulty: 'intermediate',
        prerequisites: [],
        estimatedHours: 20,
        completed: false,
      },
      {
        id: 'system-design',
        title: 'System Design',
        difficulty: 'advanced',
        prerequisites: ['node-backend', 'databases'],
        estimatedHours: 40,
        completed: false,
      },
    ];

    return {
      id: 'fullstack-path',
      title: `Ruta hacia ${targetRole}`,
      description: `Plan de estudio estructurado para convertirte en ${targetRole}, adaptado a tu nivel ${currentLevel}`,
      topics,
      progress: 0,
      estimatedDuration: '3-4 meses',
    };
  }

  private parseStudyPath(aiResponse: string): LearningPath {
    try {
      return JSON.parse(aiResponse);
    } catch (error) {
      return this.generateTemplateStudyPath('Full Stack Developer', 'intermediate');
    }
  }

  // ==================== SMART RECOMMENDATIONS ====================

  async getStudyRecommendations(): Promise<StudyRecommendation[]> {
    try {
      const analytics = await databaseService.getStudyAnalytics(30);
      const userProfile = authService.getCurrentProfile();
      const recommendations: StudyRecommendation[] = [];

      // Analyze weak areas
      const weakAreas = analytics.categoryBreakdown
        .filter((cat: any) => cat.accuracy < 60 && cat.count > 2)
        .sort((a: any, b: any) => a.accuracy - b.accuracy);

      if (weakAreas.length > 0) {
        const weakestArea = weakAreas[0];
        recommendations.push({
          type: 'focus_area',
          title: `Refuerza ${weakestArea.category}`,
          description: `Tu precisi√≥n en ${weakestArea.category} es ${weakestArea.accuracy.toFixed(1)}%. Te recomiendo practicar m√°s.`,
          reasoning: '√Årea identificada como debilidad basada en performance reciente',
          estimatedTime: 25,
          priority: 'high',
          flashcardsCount: 10,
          category: weakestArea.category,
        });
      }

      // Analyze streak and motivation
      const streak = userProfile?.streak || 0;
      if (streak < 3) {
        recommendations.push({
          type: 'practice_mode',
          title: 'Construye tu racha diaria',
          description: 'Estudia 15 minutos diarios para desarrollar el h√°bito',
          reasoning: 'La consistencia es clave para el aprendizaje efectivo',
          estimatedTime: 15,
          priority: 'medium',
          flashcardsCount: 5,
        });
      }

      // Review suggestions
      const totalQuestions = analytics.totalQuestions;
      if (totalQuestions > 50) {
        recommendations.push({
          type: 'review',
          title: 'Sesi√≥n de repaso',
          description: 'Revisa conceptos que has estudiado para consolidar conocimiento',
          reasoning: 'El repaso espaciado mejora la retenci√≥n a largo plazo',
          estimatedTime: 20,
          priority: 'medium',
          flashcardsCount: 15,
        });
      }

      // New topic suggestion
      const masteredCategories = analytics.categoryBreakdown
        .filter((cat: any) => cat.accuracy > 85 && cat.count > 5)
        .map((cat: any) => cat.category);

      if (masteredCategories.length > 0) {
        recommendations.push({
          type: 'new_topic',
          title: 'Explora temas avanzados',
          description: 'Has dominado los b√°sicos, es hora de desafiarte con temas m√°s avanzados',
          reasoning: 'Progresi√≥n natural basada en tu dominio actual',
          estimatedTime: 30,
          priority: 'low',
        });
      }

      return recommendations;
    } catch (error) {
      console.error('Failed to generate recommendations:', error);
      return [];
    }
  }

  // ==================== CONVERSATION & CHAT ====================

  private async loadConversationHistory(): Promise<void> {
    try {
      const saved = await AsyncStorage.getItem('@tutor_conversation');
      if (saved) {
        this.conversationHistory = JSON.parse(saved);
      }
    } catch (error) {
      console.error('Failed to load conversation history:', error);
    }
  }

  private async saveConversationHistory(): Promise<void> {
    try {
      await AsyncStorage.setItem('@tutor_conversation', JSON.stringify(this.conversationHistory));
    } catch (error) {
      console.error('Failed to save conversation history:', error);
    }
  }

  async chatWithTutor(userMessage: string): Promise<string> {
    // Add user message to history
    this.conversationHistory.push({
      role: 'user',
      content: userMessage,
      timestamp: new Date(),
    });

    try {
      let tutorResponse: string;

      if (this.apiKey) {
        tutorResponse = await this.generateAIChatResponse(userMessage);
      } else {
        tutorResponse = this.generateTemplateChatResponse(userMessage);
      }

      // Add tutor response to history
      this.conversationHistory.push({
        role: 'tutor',
        content: tutorResponse,
        timestamp: new Date(),
      });

      // Keep only last 20 messages
      if (this.conversationHistory.length > 20) {
        this.conversationHistory = this.conversationHistory.slice(-20);
      }

      await this.saveConversationHistory();
      
      return tutorResponse;
    } catch (error) {
      console.error('Failed to generate tutor response:', error);
      return 'Lo siento, tuve un problema t√©cnico. ¬øPuedes repetir tu pregunta?';
    }
  }

  private async generateAIChatResponse(userMessage: string): Promise<string> {
    const context = this.conversationHistory.slice(-6).map(msg => 
      `${msg.role}: ${msg.content}`
    ).join('\n');

    const systemPrompt = `
    Eres ${this.currentTutor?.name}, un tutor de programaci√≥n ${this.currentTutor?.style}.
    ${this.currentTutor?.explanationStyle}
    Mant√©n respuestas concisas pero √∫tiles. Usa emojis ocasionalmente.
    Siempre responde en espa√±ol.
    `;

    return await this.makeOpenAIRequest(`${context}\nuser: ${userMessage}`, 300, systemPrompt);
  }

  private generateTemplateChatResponse(userMessage: string): string {
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('hola') || lowerMessage.includes('hello')) {
      const greetings = [
        this.currentTutor?.greeting || '¬°Hola! ¬øEn qu√© puedo ayudarte hoy?',
        '¬°Hey! üëã ¬øListo para aprender algo nuevo?',
        '¬°Hola! Me alegra verte por aqu√≠. ¬øQu√© vamos a estudiar hoy?'
      ];
      return greetings[Math.floor(Math.random() * greetings.length)];
    }
    
    if (lowerMessage.includes('javascript') || lowerMessage.includes('js')) {
      const jsResponses = [
        'JavaScript es incre√≠ble! üöÄ Es el lenguaje que hace que la web cobre vida. ¬øHay algo espec√≠fico de JS que te gustar√≠a aprender?',
        'Ah, JavaScript! El lenguaje que nunca deja de sorprender. ¬øTe interesa saber sobre variables, funciones, o tal vez algo m√°s avanzado como closures?',
        'JS es mi favorito para ense√±ar üòä Desde lo b√°sico hasta lo m√°s avanzado, hay tanto que explorar. ¬øPor d√≥nde empezamos?'
      ];
      return jsResponses[Math.floor(Math.random() * jsResponses.length)];
    }
    
    if (lowerMessage.includes('react')) {
      const reactResponses = [
        'React cambi√≥ mi forma de ver el desarrollo frontend! ‚öõÔ∏è ¬øTe interesa aprender sobre componentes, hooks, o el manejo de estado?',
        'React es como construir con LEGO pero para interfaces! üß± ¬øQu√© parte de React te resulta m√°s desafiante?',
        'Me encanta React porque hace que las interfaces sean tan din√°micas. ¬øEst√°s empezando o ya tienes algo de experiencia?'
      ];
      return reactResponses[Math.floor(Math.random() * reactResponses.length)];
    }
    
    if (lowerMessage.includes('ayuda') || lowerMessage.includes('help')) {
      const helpResponses = [
        'Claro, estoy aqu√≠ para ayudarte! üí™ Puedo explicarte conceptos, revisar c√≥digo, o ayudarte a planear tu estudio. ¬øQu√© necesitas?',
        '¬°Por supuesto! Soy como tu compa√±ero de estudio virtual. ¬øTienes dudas sobre alg√∫n tema en particular?',
        'Perfecto, ese es mi trabajo! üéØ Dime qu√© te est√° costando trabajo y vemos c√≥mo resolverlo juntos.'
      ];
      return helpResponses[Math.floor(Math.random() * helpResponses.length)];
    }
    
    if (lowerMessage.includes('gracias') || lowerMessage.includes('thanks')) {
      const thanksResponses = [
        '¬°De nada! üòä Me encanta ayudar. ¬øHay algo m√°s que quieras aprender?',
        '¬°Para eso estoy! ü§ó Recuerda, la pr√°ctica hace al maestro. ¬øContinuamos?',
        'Un placer ayudarte! üåü No dudes en preguntar cuando tengas dudas.'
      ];
      return thanksResponses[Math.floor(Math.random() * thanksResponses.length)];
    }
    
    if (lowerMessage.includes('error') || lowerMessage.includes('bug') || lowerMessage.includes('problema')) {
      const errorResponses = [
        'Los errores son parte del proceso! üêõ Cada bug que resuelves te hace mejor programador. ¬øMe muestras qu√© est√° pasando?',
        'Ah, el debugging! Una de mis partes favoritas de programar üîç ¬øQu√© s√≠ntomas est√°s viendo?',
        'No te preocupes, todos hemos estado ah√≠. Los errores nos ense√±an m√°s que cuando todo sale perfecto. ¬øQu√© te dice la consola?'
      ];
      return errorResponses[Math.floor(Math.random() * errorResponses.length)];
    }

    // Respuestas generales m√°s variadas
    const generalResponses = [
      'Esa es una buena pregunta! ü§î Me gustar√≠a entender mejor tu situaci√≥n. ¬øPuedes contarme m√°s detalles?',
      'Interesante tema! üí° Para darte la mejor ayuda, ¬øme dices en qu√© contexto surge esta duda?',
      'Me gusta como piensas! üß† Para orientarte mejor, ¬øest√°s trabajando en alg√∫n proyecto espec√≠fico?',
      'Perfecto! Ese tipo de curiosidad es lo que hace grandes desarrolladores. ¬øHay alg√∫n ejemplo espec√≠fico que te gustar√≠a que revisemos?',
      'Excelente pregunta! üéØ Vamos a explorarlo juntos. ¬øTe parece si empezamos con los conceptos b√°sicos?'
    ];
    
    return generalResponses[Math.floor(Math.random() * generalResponses.length)];
  }

  // ==================== UTILITY METHODS ====================

  private async makeOpenAIRequest(prompt: string, maxTokens: number, systemPrompt?: string): Promise<string> {
    if (!this.apiKey) {
      throw new Error('OpenAI API key not configured');
    }

    const messages = [];
    
    if (systemPrompt) {
      messages.push({ role: 'system', content: systemPrompt });
    }
    
    messages.push({ role: 'user', content: prompt });

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.apiKey}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages,
        max_tokens: maxTokens,
        temperature: 0.7,
      }),
    });

    const data = await response.json();
    
    if (data.error) {
      throw new Error(data.error.message);
    }

    return data.choices?.[0]?.message?.content || '';
  }

  getConversationHistory(): Array<{role: string; content: string; timestamp: Date}> {
    return [...this.conversationHistory];
  }

  async clearConversationHistory(): Promise<void> {
    this.conversationHistory = [];
    await this.saveConversationHistory();
  }

  hasAPIKey(): boolean {
    return this.apiKey !== null;
  }
}

// Singleton instance
export const aiTutorService = new AITutorService();
export default aiTutorService;